package main

import (
	//	"bufio"
	"fmt"
	"github.com/gobwas/ws" //Websocks工具
	"github.com/gobwas/ws/wsutil"
	"github.com/tebeka/selenium"
	"github.com/tebeka/selenium/chrome"
	"io/ioutil"
	"math/rand"
	"mysql_con"
	"net"
	"net/http"
	//	"os"
	"regexp"
	"strconv"
	"time"
)

type Page_Order struct {
	id           string
	tb_id        string
	date         string
	vendor_id    string
	vendor_class string
	total_price  string
	note         string
	red_note     string
	red_mark     bool // 小红旗处理完毕标志
	address      string
	state        string
	Sub_Orders   []Sub_Order
}

type MySQL_Order struct {
	Page_Order
	Flag int // 数据库端订单列表状态位
}

type Sub_Order struct {
	sub_id       string
	order_id     string
	p_id         string
	p_name       string
	p_voltage    string
	amount       string
	price        string
	shipped_date string
	express      string
	tracking     string
	state        string
}

type T_Selenium struct {
	wd      selenium.WebDriver
	service *selenium.Service
}

func (s T_Selenium) SlowKeys(str string, element selenium.WebElement) {
	c := []byte(str)
	i := 0
	for { // 模拟输入用户名
		element.SendKeys(string(c[i]))
		i++
		if i >= len(c) {
			break
		}
		Sleep(200, 400) // 随机暂停一下
	}
}

func (s T_Selenium) RndMove() { // 鼠标随机移动到某个坐标
	x_base := Rnd(1, 1024)
	y_base := Rnd(1, 768)
	html := s.CheckElement(`/html`, 5) // 此处加载较慢，超时设为30S
	html.MoveTo(x_base, y_base)        //在1024*768范围内随机落点
}

func (s T_Selenium) CheckElement(strCond string, timeOut int) selenium.WebElement {
	// 根据条件判断元素是否存在，单位：秒
	var element selenium.WebElement
	var cond selenium.Condition // selenium的复杂条件模块：等待，直到条件成立或超时
	cond = func(wd selenium.WebDriver) (bool, error) {
		wd = s.wd
		element, _ = s.wd.FindElement(selenium.ByXPATH, strCond)
		if element != nil {
			return true, nil
		} else {
			return false, nil
		}
	}
	err := s.wd.WaitWithTimeout(cond, time.Duration(timeOut)*time.Second) // 限定时间内找不到指定元素，err != nil
	if err != nil {
		return nil
	} else {
		return element //如果找到元素，返回这个元素
	}
}

func (s T_Selenium) CheckElementMillisecond(strCond string, timeOut int) selenium.WebElement {
	// 根据条件判断元素是否存在，单位：毫秒
	var element selenium.WebElement
	var cond selenium.Condition // selenium的复杂条件模块：等待，直到条件成立或超时
	cond = func(wd selenium.WebDriver) (bool, error) {
		wd = s.wd
		element, _ = s.wd.FindElement(selenium.ByXPATH, strCond)
		if element != nil {
			return true, nil
		} else {
			return false, nil
		}
	}
	err := s.wd.WaitWithTimeout(cond, time.Duration(timeOut)*time.Millisecond) // 限定时间内找不到指定元素，err != nil
	if err != nil {
		return nil
	} else {
		return element //如果找到元素，返回这个元素
	}
}

func (s T_Selenium) CheckLogin() bool {
	// 登录状态检查
	sm("打开 【发货】 URL")
	Sleep(1000, 3000)
	s.wd.Get("https://wuliu.taobao.com/user/order_list_new.htm?order_status_show=send&mytmenu=fh&spm=a217wi.openworkbeachtb_web")
	sm("检查特征 【物流管理 等待发货的订单】... (5秒超时)")
	element := s.CheckElement(`//*[@id="J_Region"]/div[1]/div[1]`, 5)
	if element == nil {
		sm("目前浏览器不在登录状态")
		return false
	} else {
		sm("目前浏览器处于登录状态")
		return true
	}

}

func (s T_Selenium) ClickSms(smscode string) {
	// 输入短信验证码并点击 （由外层WSS触发）
	sm("收到前端短信验证码，开始输入")
	Sleep(1000, 2000)
	x_base := Rnd(1, 1024)
	y_base := Rnd(1, 768)
	html := s.CheckElement(`/html`, 30) // 此处加载较慢，超时设为30S
	Sleep(2000, 5000)
	html.MoveTo(x_base, y_base) //在1024*768范围内随机落点
	Sleep(2000, 5000)
	html.MoveTo(331, 252) // 短信输入框
	Sleep(100, 300)
	s.wd.ButtonDown()
	Sleep(100, 300)
	s.wd.ButtonUp()
	c := []byte(smscode)
	i := 0
	for {
		// 模拟输入验证码，此处需要在没有指定元素的情况下强行向界面输入字符
		s.wd.KeyDown(string(c[i]))
		i++
		if i >= len(c) {
			break
		}
		Sleep(100, 200)
	}
	Sleep(5000, 6000)
	html.MoveTo(362, 329) // 确定按钮
	Sleep(100, 300)
	s.wd.ButtonDown()
	Sleep(100, 300)
	s.wd.ButtonUp()
	sm("输入完毕，正在验证短信验证码...")
}

func (s T_Selenium) Login() bool {
	// 登录
	CheckStates := func() bool {
		// 多重状态检测函数， 返回值：false=错误 true=短信界面 OR 卖家界面
		var smsDiv selenium.WebElement = nil
		var salerCenter selenium.WebElement = nil
		var cond selenium.Condition // 因为是双重条件（是否出现短信验证或者直接转到了卖家中心），此处需要自定义个条件判断器
		cond = func(wd selenium.WebDriver) (bool, error) {
			wd = s.wd
			smsDiv, _ = s.wd.FindElement(selenium.ByXPATH, `//*[@id="content"]/div/div[1]/iframe`)                                        // 注意这是包裹短信验证iframe的外层div
			salerCenter, _ = s.wd.FindElement(selenium.ByXPATH, `//*[@id="module-open-aside"]/div/div/div/div/ul/li[2]/div[2]/p[1]/span`) // 卖家中心特征码
			if smsDiv != nil || salerCenter != nil {                                                                                      // 两者只要其中一个不为空，都算 “找到了”
				return true, nil
			} else {
				return false, nil
			}
		}
		err := s.wd.WaitWithTimeout(cond, 60*time.Second) // 限定时间内找不到指定元素，err != nil
		if err == nil {
			if salerCenter != nil {
				sm("成功进入卖家中心，登录成功!")
				return true
			} else {
				if smsDiv != nil {
					sm("进入短信验证界面，准备获取短信验证码")
					// 此处比较特殊，淘宝网在这里使用了iframe框架，Selenium的SwitchFrame容易发生找不到iframe隐藏元素的问题
					// 因此改为从html总元素开始利用绝对坐标的方式点击获取短信按钮
					Sleep(1000, 2000)
					x_base := Rnd(1, 1024)
					y_base := Rnd(1, 768)
					html := s.CheckElement(`/html`, 30) // 此处加载较慢，超时设为30S
					Sleep(2000, 5000)
					html.MoveTo(x_base, y_base) //在1024*768范围内随机落点
					Sleep(100, 300)
					html.MoveTo(593, 251) //获取短信按钮
					Sleep(100, 300)
					s.wd.ButtonDown()
					Sleep(100, 300) // 不能到了位置马上松开鼠标，需要一点延时
					s.wd.ButtonUp()
					Sleep(1000, 2000)
					// 因为Login运行在协程，所以外层的WSS函数仍然可以响应Websocks传过来的数据
					ok := s.CheckElement(`//*[@id="module-open-aside"]/div/div/div/div/ul/li[2]/div[2]/p[1]/span`, 60) // 卖家中心特征
					// 我们有60S的时间去处理验证码，界面变成卖家中心: return true，60S仍然没进入卖家中心: return false
					if ok != nil {
						sm("短信验证码正确，登录成功！")
						return true
					} else {
						sm("短信验证码输入错误，登录失败！")
						return false
					}
				}
			}
		} else {
			sm("发生意外，既没进入短信验证，也未进入卖家中心，登录失败")
		}
		return false
	}

	Submit := func() {
		submit_button := s.CheckElement(`//*[@id="fm-login-password"]`, 5) // 最外层元素
		Sleep(300, 500)
		submit_button.Click()
		Sleep(300, 500)
		submit_button.SendKeys(string('\ue007'))
	}

	// ***** Login 函数主体 *****：
	sm("自动跳转到https://login.taobao.com")
	sm("尝试密码登录")
	element := s.CheckElement(`//*[@id="fm-login-id"]`, 5) // 用户名框

	if element != nil {
		element.Click()
		Sleep(100, 500)
		s.SlowKeys("sword_yang:carol", element) // 缓慢输入用户名

	} else {
		sm("【严重错误】 没有检测到用户名输入框，登录失败")
		return false // 如果连用户名框、密码输入框和确定按钮都无法出现，大概率是发生了譬如断网等严重故障，直接返回false
	}
	element = s.CheckElement(`//*[@id="fm-login-password"]`, 5) // 密码框
	if element != nil {
		Sleep(500, 1000)
		s.SlowKeys("kkndcc110", element) // 缓慢输入密码
	} else {
		sm("【严重错误】 没有检测到密码输入框，登录失败")
		return false
	}

	element = s.CheckElement(`//*[@id="baxia-dialog-content"]`, 5) // 滑块
	if element != nil {
		sm("检测到滑块，开始尝试解锁")
		Slip := func(t int) bool {
			sm("开始第" + strconv.Itoa(t) + "次滑动解锁...")
			Sleep(1000, 2000)
			x_base := 920
			y_base := 425
			html := s.CheckElement(`/html`, 5) // 最外层元素
			html.MoveTo(x_base, y_base)        //落点不能是0，0
			s.wd.ButtonDown()
			html.MoveTo(1178, 425)
			Sleep(300, 500) // 不能到了位置马上松开鼠标，需要一点延时
			s.wd.ButtonUp()
			Sleep(1000, 2000)
			sm("滑动结束，检查是否有效...")
			R := false
			ok1 := s.CheckElement(`//*[@id="module-open-aside"]/div/div/div/div/ul/li[2]/div[2]/p[1]/span`, 10) // 检测有没有进入卖家中心
			if ok1 == nil {
				// 拉完之后有可能需要点一次提交:
				Submit()
				ok2 := s.CheckElement(`//*[@id="module-open-aside"]/div/div/div/div/ul/li[2]/div[2]/p[1]/span`, 10) // 检测有没有进入卖家中心
				if ok2 == nil {
					R = false
				} else {
					R = true
				}
			} else {
				R = true
			}
			if R {
				sm("第" + strconv.Itoa(t) + "次解锁成功！")
				return true
			} else {
				sm("第" + strconv.Itoa(t) + "次解锁失败！")
				return false
			}

		}
		// 规律：淘宝网一旦出现滑块，第一次大概率是不管用的，这种情况需要进行一个卖家中心的超时判断(短暂的)，
		// 如果发现没有反应，则点一次提交按钮，滑块就会再次出现，然后再进行多次解锁
		slip_count := 0
		for {
			slip_count++
			if slip_count >= 3 {
				sm("连续解锁失败，换用二维码登录...")
				break
			}
			if Slip(slip_count) == true {
				break
			}
		}

		if CheckStates() == true {
			return true
		} else {
			sm("滑块解锁多次失败，尝试改用二维码登录...")
		}

	} else {
		sm("没有检测到滑块，继续...")
		Submit() //按下确定按钮，正常情况下，没有滑动条出现
		if CheckStates() == true {
			return true
		} else {
			sm("没有检测到滑块但也未登录成功，尝试用二维码登录...")
		}
	}
	Sleep(500, 1000)
	sm("开始用二维码登录...")
	element = s.CheckElement(`//*[@id="login"]/div[1]/i`, 5) // 二维码登录按钮
	if element != nil {
		Sleep(1000, 3000)
		element.Click()
		pic, _ := s.wd.Screenshot()
		ioutil.WriteFile("pic.bmp", pic, 0644) //截图存盘
		// 将图片发送到前端，手动拍照后，等待系统自动跳转到 “卖家中心” 或者 “短信验证”
		sm("图片已发送到前端，请扫码...")
		if CheckStates() == true {
			return true
		} else {
			sm("二维码失效或其他问题，登录失败...")
			return false
		}
	} else {
		sm("【严重错误】 尝试二维码登录但没有检测到二维码，登录失败")
		return false // 发生了无法显示二维码的情况，返回false
	}
}

func (s T_Selenium) MakeWuliuText() string { // 爬取物流页文字
	page_count := 0
	page_text := ""
	for {
		page_count++
		sm("开始循环抓取发货第" + strconv.Itoa(page_count) + "页")
		element_page := s.CheckElement(`//*[@id="J_Region"]/div[1]/div[1]`, 5) // 确定发货页面已加载完毕
		if element_page != nil {
			Sleep(1000, 3000)
			sm("正在点开本页面全部小眼睛")
			output, _ := s.wd.PageSource()
			var re = regexp.MustCompile(`eyeAddress(\d{1,})`) // 通过正则合成带小眼睛元素
			for _, m := range re.FindAllStringSubmatch(output, -1) {
				element, _ := s.wd.FindElement(selenium.ByXPATH, "//*[@id='eyeAddress"+m[1]+"']") // 点击小眼睛
				Sleep(500, 1000)
				element.Click()
			}
			Sleep(500, 1000)
			element, _ := s.wd.FindElement(selenium.ByXPATH, "//*[@id='J_Express']") // 页面文字
			str, _ := element.Text()
			page_text = page_text + str
			element_nextpage := s.CheckElement(`//*[@id="J_Express"]/tfoot/tr/td/div[2]/div/a[2]/span`, 5) //下一页按钮
			if element_nextpage == nil {
				sm("已无法找到 “下一页” 按钮，主订单创建结束")
				break
			} else {
				element_nextpage.Click()
			}

		} else {
			sm("异常：无法加载 “下一页”(物流) ，抓单失败")
		}
	} // for 循环检测发货页
	sm("页面文字循环解析结束")
	return page_text
}

// 为什么要单独处理小红旗：卖家针对订单设置的留言(一个小红旗Logo)，相对于买家留言来说，只出现在【已卖出的宝贝】页面
// 另外，订单的实际价格也只能通过这个页面获取，单爬取物流页是爬不到这两个信息的。
// 最后，如果直接用订单编号Url访问的话，会被淘宝反爬系统识别，因此不得不通过物流页+已卖出宝贝，这两个页面来迂回爬取订单详细信息。
func (s T_Selenium) MakeRedFlagText() string { // 爬取"小红旗"文字

	// element_page := s.CheckElement(`//*[@id="sold_container"]/div/div[6]`, 5) // 确定【已卖出的宝贝】页面已加载完毕
	// `//*[@id="list-sold-items"]/div[5]/div/div`
	for {
		element_page := s.CheckElement(`//*[@id="sold_container"]/div/div[6]/div[2]/table[1]/tbody/tr/td[2]`, 1) // 确定【已卖出的宝贝】页面已加载完毕
		if element_page != nil {
			fmt.Println("found!")
			fmt.Println(element_page.Text())
		} else {
			fmt.Println("not found!")
		}
		Sleep(2000, 3000)
	}
	/*
		page_count := 0
		page_text := ""
		for {
			page_count++
			sm("开始循环抓取小红旗第" + strconv.Itoa(page_count) + "页")
			element_page := s.CheckElement(`//*[@id="sold_container"]/div/div[6]`, 5) // 确定【已卖出的宝贝】页面已加载完毕
			if element_page != nil {
				Sleep(1000, 2000)                                                        // 1S 到 2S 延时
				element, _ := s.wd.FindElement(selenium.ByXPATH, "//*[@id='J_Express']") // 页面文字
				str, _ := element.Text()
				page_text = page_text + str
				element_nextpage := s.CheckElement(`//*[@id="J_Express"]/tfoot/tr/td/div[2]/div/a[2]/span`, 5) //下一页按钮
				if element_nextpage == nil {
					sm("已无法找到 “下一页” 按钮，主订单创建结束")
					break
				} else {
					element_nextpage.Click()
				}

			} else {
				sm("异常：无法加载 “下一页” (已卖出的宝贝)，抓单失败")
			}
		} // for 循环检测发货页
		sm("页面文字循环解析结束")
	*/
	return "ok"
}

func (s T_Selenium) MakePageOrders(str string) []Page_Order {
	//物流页正则
	sm("开始正则物流页文字，生成页面端订单")
	var SQL string
	type Product_List struct { // 将产品库预读到本地
		p_id      string
		p_name    string
		tb_name   string
		isvoltage string
	}
	SQL = "select id, name, tb_name, isvoltage from ld_products"
	rst, _ := mysql_con.Query(SQL)
	var ProductList = make([]Product_List, len(rst))
	for k, v := range rst {
		ProductList[k].p_id = v["id"]
		ProductList[k].p_name = v["name"]
		ProductList[k].tb_name = v["tb_name"]
		ProductList[k].isvoltage = v["isvoltage"]
	}

	type Vendor_List struct { // 将经销商库预读到本地
		vendor_id      string
		vendor_tb_name string
	}

	SQL = "select id, taobao from ld_vendor where class = 2"
	rst, _ = mysql_con.Query(SQL)
	var VendorList = make([]Vendor_List, len(rst))
	for k, v := range rst {
		VendorList[k].vendor_id = v["id"]
		VendorList[k].vendor_tb_name = v["taobao"]
	}

	var orders []Page_Order

	// 去掉买家留言里的 “发货” 这两个字（有极小几率会和后面正则发生冲突）
	r_remove := regexp.MustCompile(`(买家留言：[\r\n].+)发货([\r\n])`)
	str = r_remove.ReplaceAllString(str, `$1$2`) // 修改原始字符串

	var re = regexp.MustCompile(`订单编号：[\s\S]+?发货[\r\n]`)
	match := re.FindAllStringSubmatch(str, -1) // 订单与订单之间

	orders = make([]Page_Order, len(match))
	for k, v := range match {

		r := regexp.MustCompile(`订单编号：(\d{1,})[\r\n]创建时间：(.+?)[\r\n]`)
		m := r.FindStringSubmatch(v[0])

		if len(m) > 0 {
			orders[k].tb_id = m[1]
			orders[k].date = m[2]
			orders[k].vendor_id = "84" // 默认经销商：自营
			orders[k].vendor_class = "1"
			orders[k].state = "2" //待发货
		}

		r = regexp.MustCompile(`收货信息：[\r\n](.+?)[\r\n]`)
		m = r.FindStringSubmatch(v[0])
		// 合成淘宝风格收货地址：
		r_add := regexp.MustCompile(`^(.+?)\s{3}(.+?),.+?,\s{1}(.+?),\s{1}(.+?)$`)
		m_add := r_add.FindStringSubmatch(m[1])
		if len(m_add) > 0 {
			r = regexp.MustCompile(` `)
			trim_space := r.ReplaceAllString(m_add[2], "") //去掉原文里的空格
			address := "{" + m_add[1] + "}" + " " + m_add[3] + "，" + m_add[4] + "，" + trim_space
			orders[k].address = address
			// 处理经销商
			tb_name := m_add[1]
			for _, v := range VendorList {
				if tb_name == v.vendor_tb_name {
					orders[k].vendor_id = v.vendor_id
					orders[k].vendor_class = "2" // 搜出来的默认就是经销商
					fmt.Println("found vendor: ", tb_name, " ->", v.vendor_id)
					break
				}
			}
		} else {
			orders[k].address = "地址抓取错误，订单编号：" + orders[k].tb_id
			fmt.Println(orders[k].address)
		}

		r = regexp.MustCompile(`买家留言：[\r\n](.+?)[\r\n]`)
		m = r.FindStringSubmatch(v[0])
		if len(m) > 0 {
			orders[k].note = m[1]
		}

		var suborders []Sub_Order
		r = regexp.MustCompile(`[\r\n](.+?)[\r\n](颜色分类：\s(.+?)[\r\n]){0,1}(\d{1,}).\d{1,}×\s(\d{1,})`)
		mg := r.FindAllStringSubmatch(v[0], -1) //注意：返回match组，要用FindAllStringSubmatch并加上-1参数
		if len(mg) > 0 {
			suborders = make([]Sub_Order, len(mg))
			var total_price int
			for k2, m2 := range mg {
				suborders[k2].p_name = m2[1] + m2[3]

				p_name := m2[1] + m2[3]       // p_name 由宝贝标题 + 宝贝SKU构成
				suborders[k2].p_id = "38"     // 默认ID: 自定义
				suborders[k2].p_name = p_name // 默认情况：p_id = 38 (自定义) p_name = 抓到的文字
				suborders[k2].p_voltage = "1" // 默认电压：国规
				//此处处理p_id 和 p_name 的对应关系

				if orders[k].tb_id == "9876543219876543210" {
					fmt.Println("v[0]---------------------")
					fmt.Println(v[0])
					fmt.Println("v[0]---------------------")
				}

				for _, p := range ProductList {
					if p_name == p.tb_name { // 如产品能在数据库中找到，用数据库的
						suborders[k2].p_id = p.p_id
						suborders[k2].p_name = p.p_name
						if p.isvoltage == "1" {
							// PS: 1国 2美 3英 4欧 5未知 6空 处理经销商电压，从留言中大致分析，以防止经销商拍下后不标电压的情况
							if orders[k].vendor_class == "2" {
								suborders[k2].p_voltage = "5" // 如果接下来的正则全部不通过 或 没有留言，则默认为"未知"以提醒发货的时候注意
								if orders[k].note != "" {
									r := regexp.MustCompile(`(美|110|US|Us|us)`)
									m := r.FindStringSubmatch(orders[k].note) //返回：值

									if len(m) > 0 {
										suborders[k2].p_voltage = "2"
										fmt.Println("found 美规110！")
									}
									r = regexp.MustCompile(`(英|UK|Uk|uk|港|HK|Hk|hk)`)
									m = r.FindStringSubmatch(orders[k].note) //返回：值
									if len(m) > 0 {
										suborders[k2].p_voltage = "3"
										fmt.Println("found 英规220！")
									}
									r = regexp.MustCompile(`(欧|EU|Eu|eu|歐|法|德)`)
									m = r.FindStringSubmatch(orders[k].note) //返回：值
									if len(m) > 0 {
										suborders[k2].p_voltage = "4"
										fmt.Println("found 欧规220！")
									}
								}
							}

						} else {
							suborders[k2].p_voltage = "6" // 如产品本身不插电，则电压选项为空
						}
						fmt.Println("found product : ", p_name, " ->", p.p_name)
						break
					}
				}

				p, _ := strconv.Atoi(m2[4]) // 单价
				q, _ := strconv.Atoi(m2[5]) // 数量
				intPrice := p * q
				total_price += intPrice
				strPrice := strconv.Itoa(intPrice)
				suborders[k2].price = strPrice
				suborders[k2].shipped_date = ""
				suborders[k2].express = ""
				suborders[k2].tracking = ""
				suborders[k2].state = "2"
				suborders[k2].amount = m2[5]
			} //for
			orders[k].total_price = strconv.Itoa(total_price) // 订单总价
			orders[k].Sub_Orders = suborders

			if orders[k].tb_id == "9876543219876543210" {
				fmt.Println(orders[k])
			}

		} // if
	} // for
	return orders
}

func (s T_Selenium) MakeMySQLOrders() []MySQL_Order {
	// 生产订单列表（mysql端）
	SQL := "SELECT id, date, price, tb_id, note, address, state_id,(SELECT group_concat(id,'|',item_describe,'|', product_id, '|', amount,'|', voltage,'|', state,'|', price) FROM ld_order_suborder where ld_order_suborder.order_id = ld_order.id) as p_info FROM ld_order where state_id = 2 and tb_id <> ''"
	rst, _ := mysql_con.Query(SQL)
	OrdersMySQL = make([]MySQL_Order, len(rst))
	for k, v := range rst {
		OrdersMySQL[k].id = v["id"]
		OrdersMySQL[k].tb_id = v["tb_id"]
		OrdersMySQL[k].total_price = v["price"]
		OrdersMySQL[k].date = v["date"]
		OrdersMySQL[k].note = v["note"]
		OrdersMySQL[k].address = v["address"]
		OrdersMySQL[k].state = v["state"]
		r := regexp.MustCompile(`(.+?),`)         // 切分逗号，返回组，样本：7769|MK2 6J1(普)|2|2|1|2|1460,7770|MK3|6|3|2|2|3840
		m := r.FindAllString(v["p_info"]+",", -1) // 末端加个逗号以能适配正则（PS:这是一个简化处理方案）
		SubOrders := make([]Sub_Order, len(m))
		for k1, v1 := range m {
			r := regexp.MustCompile(`(\d{1,})\|(.+?)\|(\d{1,})\|(\d{1,})\|(\d{1,})\|(\d{1,})\|(\d{1,})`) // 切分 | 号，返回：值
			m = r.FindStringSubmatch(v1)
			SubOrders[k1].order_id = v["id"] // 子订单order_id = 主订单id
			SubOrders[k1].sub_id = m[1]
			SubOrders[k1].p_name = m[2]
			SubOrders[k1].p_id = m[3]
			SubOrders[k1].amount = m[4]
			SubOrders[k1].p_voltage = m[5]
			SubOrders[k1].state = m[6]
			SubOrders[k1].price = m[7]
		}
		OrdersMySQL[k].Sub_Orders = SubOrders
	}
	return OrdersMySQL
}

func (s T_Selenium) Compare(pageOrders []Page_Order, mysqlOrders []MySQL_Order) {
	// 比对1：页面 -> mySQL (页面有而数据库没有，则新增这条订单到数据库)
	for _, page := range pageOrders {
		addNew := true
		for _, mysql := range mysqlOrders {
			if page.tb_id == mysql.tb_id {
				addNew = false
				break
			}
		}
		if addNew {
			var neworder MySQL_Order
			neworder.Page_Order = page //新增订单数据来源自页面订单
			neworder.Flag = 1          // 改变新增订单的flag = 1 , PS: 1=新增 2=屏蔽 3=修改
			mysqlOrders = append(mysqlOrders, neworder)
			fmt.Println("新增：", page.tb_id)
		}
	}
	// 比对2：mySQL -> 页面 （数据库有而页面没有，则在数据库中取消这条订单）
	for k, mysql := range mysqlOrders {
		disable := true
		for _, page := range pageOrders {
			if mysql.tb_id == page.tb_id {
				disable = false
				break
			}
		}
		if disable {
			mysqlOrders[k].Flag = 2 // 此订单需要屏蔽
			fmt.Println("屏蔽：", mysql.tb_id)
		}
	}

	// 将变化写入数据库
	var SQL string
	for _, v := range mysqlOrders {
		switch v.Flag {
		case 1: // 新增
			sm("正在新增订单：" + v.tb_id)
			SQL = "INSERT INTO ld_order " +
				"(date, vendor_id, tb_id, price, state_id, note, address)" +
				" VALUES " +
				"('" + v.date + "'," + v.vendor_id + ", " + "'" + v.tb_id + "', " + v.total_price + ", " +
				"2, '" + v.note + "', '" + v.address + "')"
			newOrderID := mysql_con.Exec(SQL) // 返回一个新的OrderID

			for _, v2 := range v.Sub_Orders {
				SQL = "INSERT INTO ld_order_suborder " +
					"(order_id, product_id, vendor_id, item_describe, voltage, amount, price, shiped_date, state)" +
					" VALUES " +
					"(" + newOrderID + ", " + v2.p_id + ", " + v.vendor_id + ", '" + v2.p_name + "', " +
					v2.p_voltage + ", " + v2.amount + ", " + v2.price + ", '1900-01-01 00:00:00', " + v2.state + ")"
				mysql_con.Exec(SQL) // 无需返回ID
			}

		case 2: // 屏蔽
			sm("正在关闭订单：" + v.tb_id)
			SQL = "UPDATE ld_order SET state_id = 12 WHERE id = " + v.id // 主订单修改
			fmt.Println(SQL)
			mysql_con.Exec(SQL)
			SQL = "UPDATE ld_order_suborder SET state = 12 WHERE order_id = " + v.id // 子订单修改, v.id = 主订单id (order_id)
			fmt.Println(SQL)
			mysql_con.Exec(SQL)

		case 3: // 更新
		}
	}
	sm("本次更新完毕!")
}

var OrdersPage []Page_Order
var OrdersMySQL []MySQL_Order

func (s T_Selenium) Check() {

	// ***** Check函数主体 *****：
	sm("cls") // 客户端清屏
	if s.CheckLogin() == true {
		PageWuliuText := s.MakeWuliuText()            // 获取物流页文字（裸文字）
		OrdersPage := s.MakePageOrders(PageWuliuText) // 将裸文字转换为页面端订单列表）

		OrdersMySQL := s.MakeMySQLOrders() // 生成数据库端订单
		s.Compare(OrdersPage, OrdersMySQL) // 比对数据库并写入变化
		// 停止点：电压问题已解决，还没有做写库试验，写库字符串变量名应该要改，然后就可以着手小红旗了

		// 调用小红旗以确定卖家留言和实际价格（待处理）
		// -----------------------PS: 本功能暂时没有实现 -----------------------

	} else {
		sm("ERR: 【发货】页打开失败。")
	}
}

// ***** 全局变量、常量 ***** ：
var Conn net.Conn
var Selenium T_Selenium
var coordinate_x, coordinate_y int

func WebSocket() {
	// 初始化 Websocks
	var httpSrv *http.Server
	httpSrv = &http.Server{Addr: ":8082"}
	http.HandleFunc("/", WSS)
	httpSrv.ListenAndServe() //代码置于此行之后将不被执行，因为协程已经被Listen起来了
}

func WSS(w http.ResponseWriter, r *http.Request) {
	// Websocks程序主体处理
	if Conn != nil {
		fmt.Println("Old Conn Destroyed:", Conn)
		Conn.Close()
	}

	Conn := startWsServer(w, r)
	var msg_receive []byte
	fmt.Println("New Conn Created:", Conn)

	for {

		msg_receive, _, _ = wsutil.ReadClientData(Conn)
		msg_str := string(msg_receive)

		if msg_str == "" {
			continue
		}

		reg := regexp.MustCompile(`#rockage_cmds#(.+?)#rockage_datas#(.+)`)
		match := reg.FindStringSubmatch(string(msg_receive))

		if match == nil {
			continue
		}

		cmds := match[1]
		datas := match[2]
		fmt.Println(cmds)

		switch cmds {
		case "start":

			Selenium.Check()

		case "stop":

			SlowMove := func(x0 int, y0 int, x1 int, y1 int, e selenium.WebElement) {
				x := x0
				y := y0
				step_x := 0
				step_y := 0
				dx := x1 - x0
				dy := y1 - y0
				k := dy / dx // 求出斜率
				if x1 >= x0 {
					step_x = 1
				} else {
					step_x = -1
				}
				if y1 >= y0 {
					step_y = 1
					k = Abs(k)
				} else {
					step_y = -1
					k = 0 - Abs(k)
				}
				RX := false
				RY := false
				for {
					e.MoveTo(x, y)

					y = y + k
					Sleep(1, 2)
					if Abs(x0-x) >= Abs(dx) {
						RX = true
					} else {
						x = x + step_x
					}
					if Abs(y0-y) >= Abs(dy) {
						RY = true
					} else {
						y = y + step_y
					}

					if RX == true && RY == true {
						break
					}
				}
			}
			// //*[@id="baxia-punish"]/div[2]/div/div[1]/div[2]/div
			for {

				element_test := Selenium.CheckElement(`/html`, 1)
				SlowMove(Rnd(830, 870), Rnd(680, 720), Rnd(850, 890), Rnd(630, 670), element_test)
				SlowMove(Rnd(850, 890), Rnd(630, 670), Rnd(870, 910), Rnd(680, 720), element_test)
				SlowMove(Rnd(870, 910), Rnd(680, 720), Rnd(890, 930), Rnd(630, 670), element_test)
				SlowMove(Rnd(890, 930), Rnd(630, 670), Rnd(910, 950), Rnd(680, 720), element_test)

				SlowMove(Rnd(910, 950), Rnd(680, 720), Rnd(890, 930), Rnd(630, 670), element_test)
				SlowMove(Rnd(890, 930), Rnd(630, 670), Rnd(870, 910), Rnd(680, 720), element_test)
				SlowMove(Rnd(870, 910), Rnd(680, 720), Rnd(850, 890), Rnd(630, 670), element_test)
				SlowMove(Rnd(850, 890), Rnd(630, 670), Rnd(830, 870), Rnd(680, 720), element_test)
			}
			//850, 700
			//870, 650
			//890, 700
			//910, 650
			//930, 700
			//Selenium.wd.ButtonDown()
			//	for {
			/*
				SlowMove(850, 700, 870, 650, element_test)
				SlowMove(870, 650, 890, 700, element_test)
				SlowMove(890, 700, 910, 650, element_test)
				SlowMove(910, 650, 930, 700, element_test)

				SlowMove(930, 700, 910, 650, element_test)
				SlowMove(910, 650, 890, 700, element_test)
				SlowMove(890, 700, 870, 650, element_test)
				SlowMove(870, 650, 850, 700, element_test)
				Selenium.wd.ButtonUp()
			*/
			/*
				SlowMove(Rnd(830, 870), Rnd(680, 720), Rnd(845, 885), Rnd(630, 670), element_test)
				SlowMove(Rnd(845, 885), Rnd(630, 670), Rnd(870, 910), Rnd(680, 720), element_test)
				SlowMove(Rnd(870, 910), Rnd(680, 720), Rnd(890, 930), Rnd(630, 670), element_test)
				SlowMove(Rnd(890, 930), Rnd(630, 670), Rnd(910, 950), Rnd(680, 720), element_test)

				SlowMove(Rnd(910, 950), Rnd(680, 720), Rnd(890, 930), Rnd(630, 670), element_test)
				SlowMove(Rnd(890, 930), Rnd(630, 670), Rnd(870, 910), Rnd(680, 720), element_test)
				SlowMove(Rnd(870, 910), Rnd(680, 720), Rnd(870, 910), Rnd(680, 720), element_test)
				SlowMove(Rnd(870, 910), Rnd(680, 720), Rnd(830, 870), Rnd(680, 720), element_test)
			*/
			//	Sleep(500, 1000)
			//element_test.SendKeys(string('\ue015'))
			//}

			break
			/*
				//Selenium.wd.Get("https://trade.taobao.com/trade/itemlist/list_sold_items.htm?mytmenu=ymbb&spm=a217wi.openworkbeachtb_web")
				for i := 2; i <= 16; i++ { // 基点元素编号2-16，每页合计15个
					//				element_base := Selenium.CheckElement(`//*[@id="sold_container"]/div/div[6]/div[`+strconv.Itoa(i)+`]/table[1]/tbody/tr/td[2]`, 1)
					//				fmt.Println(element_base)
					//				element_base.MoveTo(0, 0)

					script := `ele = document.evaluate('//*[@id="sold_container"]/div/div[6]/div[` + strconv.Itoa(i) + `]/table[1]/tbody/tr/td[2]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
					ele.scrollIntoView(true)`
					var arg []interface{}
					Selenium.wd.ExecuteScript(script, arg)

					element_base := Selenium.CheckElement(`//*[@id="sold_container"]/div/div[6]/div[`+strconv.Itoa(i)+`]/table[1]/tbody/tr/td[2]`, 1)
					fmt.Println("--- ELEMENT : ", strconv.Itoa(i), " ---")
					point, _ := element_base.LocationInView()
					fmt.Println(point)
					element_test := Selenium.CheckElement(`/html/body`, 1)
					element_test.MoveTo(point.X, point.Y)
					X := point.X
					Y := point.Y

					Rnd_X := X - Rnd(200, 500)
					Rnd_Y := Y + Rnd(200, 500)
					RX := false
					RY := false
					for {
						element_test.MoveTo(X, Y)
						Sleep(50, 100)
						if X >= Rnd_X {
							RX = true
						} else {
							X += 10
						}

						if Y <= Rnd_Y {
							RY = true
						} else {
							Y -= 10
						}

						if RX == true && RY == true {
							break
						}
					}

					final_X := point.X + Rnd(33, 37)
					final_Y := point.Y + Rnd(20, 25)
					Sleep(300, 500)

					for {
						element_test.MoveTo(X, Y)
						Sleep(50, 100)
						if X >= final_X {
							RX = true
						} else {
							X += 1
						}

						if Y >= final_Y {
							RY = true
						} else {
							Y += 1
						}

						if RX == true && RY == true {
							break
						}

					}

					//Sleep(1000, 2000)
					//pic, _ := Selenium.wd.Screenshot()
					//ioutil.WriteFile("pic"+strconv.Itoa(i)+".bmp", pic, 0644) //截图存盘
					Sleep(1000, 2000)

				}
				break
			*/
			/*
				filename := "page_text.txt"
				f, _ := os.Open(filename)
				defer f.Close()
				b, _ := ioutil.ReadAll(f)
				s := string(b)
				r := regexp.MustCompile(`\r`)
				trim_n := r.ReplaceAllString(s, "") //去掉原文里的\r
				var se T_Selenium
				OrdersPage := se.MakePageOrders(trim_n) // 将裸文字转换为页面端订单列表）

				// 小红旗留言机制：
				// 问题1： 当鼠标悬停在小红旗上的时候，如果有内容，页面会实时渲染出一个小红旗留言div来，因此无法直接从HTML或element.Text()中获取。
				// 问题2： 实时生成的这个div本身不包含Order_ID，因此无法与订单编号绑定。
				// 对策：  先锁定一个与订单编号关联的元素，然后以这个元素为基点，将鼠标移动到相对的小红旗位置，
				// 然后对全部小红旗div进行轮询，取最后一个，也就是最后悬停在上面的那个，由此迂回解决订单编号绑定问题。

				for _, v := range OrdersPage { // 全部标记位先置false
					v.red_mark = false
				}

				page_count := 1
				R := false
				for {

					for i := 2; i <= 16; i++ { // 基点元素编号2-16，每页合计15个
						element_base := Selenium.CheckElement(`//*[@id="sold_container"]/div/div[6]/div[`+strconv.Itoa(i)+`]/table[1]/tbody/tr/td[2]`, 1)
						reactid, err := element_base.GetAttribute("data-reactid")
						if err != nil {
							fmt.Println("发生错误：基点元素无法找到！")
							for _, v2 := range OrdersPage { // 全部标记位置true
								v2.red_mark = true
							}
							break
						}
						r := regexp.MustCompile(`\$(\d{1,})\.`)
						m := r.FindStringSubmatch(reactid) // 从基点元素截取到订单id
						order_id := m[1]

						order_exist := false
						order_exist_k := 0
						for k, v := range OrdersPage {
							if v.tb_id == order_id {
								Selenium.RndMove()
								Sleep(2000, 3000)                             // 随机停顿，防反爬
								element_base.MoveTo(Rnd(33, 37), Rnd(20, 24)) // 基点 到 小红旗的偏移量
								Sleep(500, 800)                               // 停顿，以给页面留一点渲染的时间
								red_note := ""
								for j := 5; j <= 19; j++ { // 第一个生成的小红旗留言，div编号为5，最后一个div编号为19，合计15个
									//fmt.Println("finding element:", strconv.Itoa(j))
									// 等待：100ms 或 找到元素 （此处无需长时间等待，因已前面已经留足了渲染时间）
									e_red := Selenium.CheckElementMillisecond(`//*[@id="list-sold-items"]/div[`+strconv.Itoa(j)+`]`, 50)
									if e_red != nil {
										red_note, _ = e_red.Text() // red_note 总是最后一个
										//fmt.Println("found!")
										//fmt.Println("order_id = ", order_id)
										//fmt.Println("red_note = ", red_note)
									}
								}
								OrdersPage[k].red_note = red_note
								OrdersPage[k].red_mark = true
								order_exist = true
								order_exist_k = k
							}

						}
						if order_exist {
							fmt.Println("订单ID:", order_id, "已处理，留言：", OrdersPage[order_exist_k].red_note)
						} else {
							fmt.Println("订单ID:", order_id, "订单数据库没有这条记录，略过")
						}
						R = false
						for _, v := range OrdersPage { // 全部订单处理完了吗？
							if v.red_mark == false {
								R = true
							}
						}

					}
					page_count++

					//R = false

					if R == false || page_count > 10 { // 全部订单的小红旗截取完毕 或 最大截取深度：10页
						break
					} else {

						element_next := Selenium.CheckElement(`//*[@id="sold_container"]/div/div[6]/div[1]/div[3]/div/button[2]`, 5)
						Sleep(5000, 6000)

						fmt.Println("R=", R)
						fmt.Println("page_count=", page_count)
						for _, v := range OrdersPage {
							fmt.Println("tb_id=", v.tb_id, " mark=", v.red_mark)
						}
						Selenium.RndMove() // 鼠标随机移动一下
						Sleep(500, 1000)
						Selenium.RndMove() // 鼠标随机移动一下
						Sleep(500, 1000)
						element_next.Click()

					}
				}
				fmt.Println(OrdersPage)
				break
				// https://trade.taobao.com/trade/itemlist/list_sold_items.htm?mytmenu=ymbb&spm=a217wi.openworkbeachtb_web
			*/
			/*
				filename := "redhtml.txt"
				f, _ := os.Open(filename)
				defer f.Close()
				b, _ := ioutil.ReadAll(f)
				s := string(b)
				code := UTF8CodeToString(s)
				data := []byte(code)
				ioutil.WriteFile("hello.txt", data, 0644)
			*/
			/*
				filename := "page_text.txt"
				f, _ := os.Open(filename)
				defer f.Close()
				b, _ := ioutil.ReadAll(f)
				s := string(b)
				r := regexp.MustCompile(`\r`)
				trim_n := r.ReplaceAllString(s, "") //去掉原文里的\r
				var se T_Selenium
				OrdersPage := se.MakePageOrders(trim_n) // 将裸文字转换为页面端订单列表）
				OrdersMySQL := se.MakeMySQLOrders()     // 生成数据库端订单
				se.Compare(OrdersPage, OrdersMySQL)     // 比对数据库并写入变化
			*/

		case "check":
			if Selenium.wd != nil {
				if Selenium.CheckLogin() == true {
					sm("state suceess")
				} else {
					sm("state error!")
					go Selenium.Login()
				}
			} else {
				sm("没有检测到Selenium")
			}

		case "restart":
			if Selenium.service != nil {
				Selenium.service.Stop() //停止之前的selenium实例
			}
			startChrome() // 初始化Selenium

		case "login":
			go Selenium.Login() // 采用协程方式运行Login，否则将会造成阻塞而无法接收WSS传回来的短信验证码

		case "sms":
			Selenium.ClickSms(datas)

		case "coordinate":
			fmt.Println(datas)
			r := regexp.MustCompile(`(\d{1,}),(\d{1,})`)
			m := r.FindStringSubmatch(string(datas))
			coordinate_x, _ = strconv.Atoi(m[1])
			coordinate_y, _ = strconv.Atoi(m[2])
			fmt.Println("X=", coordinate_x, "  Y=", coordinate_y)
		default:

		}

	}
}

func startWsServer(w http.ResponseWriter, r *http.Request) net.Conn {
	Conn, _, _, _ = ws.UpgradeHTTP(r, w)
	return Conn
}

/*
func startTimer() {
	time.AfterFunc(time.Second*3, func() {
		fmt.Println("AfterFunc")
		t := time.NewTicker(time.Second * 2)
		defer t.Stop()
		for range t.C {
			fmt.Println("Ticker")
			if timer_stop {
				t.Stop()
				timer_stop = false
			}
		}
	})
}
*/

func startChrome() {
	opts := []selenium.ServiceOption{}
	caps := selenium.Capabilities{
		"browserName":      "chrome",
		"pageLoadStrategy": "eager",
	}
	imagCaps := map[string]interface{}{
		//		"profile.managed_default_content_settings.images": 2,
	}
	chromeCaps := chrome.Capabilities{
		Prefs: imagCaps,
		Path:  "",
		Args: []string{
			//"--headless",
			"--no-sandbox",
			"--disable-blink-features=AutomationControlled",
			"--user-agent=Mozilla/ 5.0(Windows NT 10.0; WOW64) Chrome/55.0.2883.87 Safari/537.36",
		},
	}
	caps.AddChrome(chromeCaps)
	Selenium.service, _ = selenium.NewChromeDriverService("./chromedriver/windows/chromedriver.exe", 9515, opts...)
	Selenium.wd, _ = selenium.NewRemote(caps, fmt.Sprintf("http://localhost:%d/wd/hub", 9515))
	sm("打开淘宝网首页...")
	// Selenium.wd.Get("https://taobao.com")
	Selenium.wd.Get("https://jspaint.app")
	//ok := Selenium.CheckElement(`//*[@id="q"]`, 10) // 检测进入首页
	//if ok != nil {
	//		sm("正确访问淘宝网首页，selenium初始化成功")
	//	} else {
	//		sm("无法访问淘宝网首页，selenium初始化失败！")
	//	}

}

func sm(msg string) {
	var msg_send []byte = []byte(msg)
	wsutil.WriteServerMessage(Conn, ws.OpText, msg_send)
}

func Rnd(min int, max int) int { // 随机数产生器
	rand.Seed(time.Now().Unix())
	return min + rand.Intn(max-min)
}

func Sleep(min int, max int) { // 随机延时产生器
	rand.Seed(time.Now().Unix())
	time.Sleep(time.Duration(min+rand.Intn(max-min)) * time.Millisecond) // 毫秒
}

func UTF8CodeToString(str string) string {
	//utf8编码转换为string:
	s2 := []byte(str)
	temp := make([]byte, 4)
	var rec int16 = 0
	var result []byte
	var r_count int16 = 0
	for _, v := range s2 {
		if rec == 0 || rec == 1 {
			result = append(result, v)
		}
		if v == 92 { // "\"符号
			rec = 1
			continue
		}
		if rec == 1 {
			if v == 117 { //  "u" 字母
				rec = 2
			} else {
				rec = 0
			}
			continue
		}
		if rec == 2 {
			temp[r_count] = v
			r_count++
			if r_count > 3 {
				utf8_code, _ := strconv.ParseInt(string(temp), 16, 32)
				utf8_string := fmt.Sprintf("%c", utf8_code)
				utf8_byte := []byte(utf8_string)
				for _, vv := range utf8_byte {
					result = append(result, vv)
				}
				rec = 0
				r_count = 0
			}
		}
	}
	t := string(result)
	reg := regexp.MustCompile(`\\u`) //去掉转义符: \u
	t = reg.ReplaceAllString(t, "")
	reg = regexp.MustCompile(`\\`) //去掉转义符: \
	t = reg.ReplaceAllString(t, "")
	return t
}

func Abs(a int) (ret int) {
	ret = (a ^ a>>31) - a>>31
	return
}
