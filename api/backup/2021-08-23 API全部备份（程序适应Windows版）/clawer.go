package main

import (
	"bufio"
	"fmt"
	"github.com/go-vgo/robotgo"
	"github.com/gobwas/ws" //Websocks????
	"github.com/gobwas/ws/wsutil"
	"github.com/tebeka/selenium"
	"github.com/tebeka/selenium/chrome"
	"io/ioutil"
	"math/rand"
	"mysql_con"
	"net"
	"net/http"
	"os"
	"regexp"
	"strconv"
	"time"
)

type Page_Order struct {
	id           string
	tb_id        string
	date         string
	vendor_id    string
	vendor_class string
	total_price  string
	note         string
	red_note     string
	red_mark     bool // ??????????????????
	address      string
	state        string
	Sub_Orders   []Sub_Order
}

type MySQL_Order struct {
	Page_Order
	Flag int // ??????????????????????
}

type Sub_Order struct {
	sub_id       string
	order_id     string
	p_id         string
	p_name       string
	p_voltage    string
	amount       string
	price        string
	shipped_date string
	express      string
	tracking     string
	state        string
}

type T_Selenium struct {
	wd      selenium.WebDriver
	service *selenium.Service
}

func (s T_Selenium) SwitchPage(w int) bool {
	windows, _ := Selenium.wd.WindowHandles()
	var handle string = ""
	for k, v := range windows {
		if k == w {
			handle = v
		}
	}
	if handle != "" {
		s.wd.SwitchWindow(windows[w])
		return true
	} else {
		return false
	}
}

func (s T_Selenium) SlowKeys(str string, element selenium.WebElement) {
	c := []byte(str)
	i := 0
	for { // ????????????????
		element.SendKeys(string(c[i]))
		i++
		if i >= len(c) {
			break
		}
		Sleep(200, 400) // ????????????
	}
}

func (s T_Selenium) CheckElement(strCond string, timeOut int, milliSecond ...bool) selenium.WebElement {
	// ??????????????????????????????????
	var element selenium.WebElement
	var cond selenium.Condition // selenium????????????????????????????????????????
	cond = func(wd selenium.WebDriver) (bool, error) {
		wd = s.wd
		element, _ = s.wd.FindElement(selenium.ByXPATH, strCond)
		if element != nil {
			return true, nil
		} else {
			return false, nil
		}
	}
	var err error
	if len(milliSecond) == 0 {
		err = s.wd.WaitWithTimeout(cond, time.Duration(timeOut)*time.Second) // ??????????????????????????err != nil (????????milliSecond??????????????)
	} else {
		err = s.wd.WaitWithTimeout(cond, time.Duration(timeOut)*time.Millisecond) // ??????milliSecond????????????????)
	}
	if err != nil {
		return nil
	} else {
		return element //??????????????????????????
	}
}

func (s T_Selenium) CheckLogin() bool {
	// ????????????
	windows, _ := Selenium.wd.WindowHandles()

	if windows[0] != "" {
		sm("??????????????")
		s.wd.SwitchWindow(windows[0]) // 0: ????????
	} else { // ????????????????????
		if windows[1] != "" {
			s.wd.CloseWindow(windows[1]) // 1: ????
		}
		if windows[2] != "" {
			s.wd.CloseWindow(windows[2]) // 2: ????????????
		}
	}
	sm("???????? ... (5??????)")
	element := s.CheckElement(`//*[@id="module-open-aside"]/div/div/div/div/ul/li[1]/div[1]/span[2]/div/div/div`, 5)
	if element == nil {
		sm("??????????????????????")
		return false
	} else {
		sm("??????????????????????")
		return true
	}
}

func (s T_Selenium) ClickSms(smscode string) {
	// ???????????????????? ????????WSS??????
	sm("????????????????????????????")
	Sleep(1000, 2000)
	x_base := Rnd(1, 1024)
	y_base := Rnd(1, 768)
	html := s.CheckElement(`/html`, 30) // ??????????????????????30S
	Sleep(2000, 5000)
	html.MoveTo(x_base, y_base) //??1024*768??????????????
	Sleep(2000, 5000)
	html.MoveTo(331, 252) // ??????????
	Sleep(100, 300)
	s.wd.ButtonDown()
	Sleep(100, 300)
	s.wd.ButtonUp()
	c := []byte(smscode)
	i := 0
	for {
		// ????????????????????????????????????????????????????????????????
		s.wd.KeyDown(string(c[i]))
		i++
		if i >= len(c) {
			break
		}
		Sleep(100, 200)
	}
	Sleep(5000, 6000)
	html.MoveTo(362, 329) // ????????
	Sleep(100, 300)
	s.wd.ButtonDown()
	Sleep(100, 300)
	s.wd.ButtonUp()
	sm("????????????????????????????...")
}

func (s T_Selenium) Login() bool {
	// ????
	CheckStates := func() bool {
		// ?????????????????? ????????false=???? true=???????? OR ????????
		var smsDiv selenium.WebElement = nil
		var salerCenter selenium.WebElement = nil
		var cond selenium.Condition // ????????????????????????????????????????????????????????????????????????????????????
		cond = func(wd selenium.WebDriver) (bool, error) {
			wd = s.wd
			smsDiv, _ = s.wd.FindElement(selenium.ByXPATH, `//*[@id="content"]/div/div[1]/iframe`)                                        // ????????????????????iframe??????div
			salerCenter, _ = s.wd.FindElement(selenium.ByXPATH, `//*[@id="module-open-aside"]/div/div/div/div/ul/li[2]/div[2]/p[1]/span`) // ??????????????
			if smsDiv != nil || salerCenter != nil {                                                                                      // ???????????????????????????? ??????????
				return true, nil
			} else {
				return false, nil
			}
		}
		err := s.wd.WaitWithTimeout(cond, 60*time.Second) // ??????????????????????????err != nil
		if err == nil {
			if salerCenter != nil {
				sm("??????????????????????????!")
				return true
			} else {
				if smsDiv != nil {
					sm("????????????????????????????????????")
					// ????????????????????????????????iframe??????Selenium??SwitchFrame??????????????iframe??????????????
					// ??????????html????????????????????????????????????????????
					Sleep(1000, 2000)
					x_base := Rnd(1, 1024)
					y_base := Rnd(1, 768)
					html := s.CheckElement(`/html`, 30) // ??????????????????????30S
					Sleep(2000, 5000)
					html.MoveTo(x_base, y_base) //??1024*768??????????????
					Sleep(100, 300)
					html.MoveTo(593, 251) //????????????
					Sleep(100, 300)
					s.wd.ButtonDown()
					Sleep(100, 300) // ??????????????????????????????????????
					s.wd.ButtonUp()
					Sleep(1000, 2000)
					// ????Login??????????????????????WSS????????????????Websocks????????????
					ok := s.CheckElement(`//*[@id="module-open-aside"]/div/div/div/div/ul/li[2]/div[2]/p[1]/span`, 60) // ????????????
					// ??????60S????????????????????????????????????: return true??60S??????????????????: return false
					if ok != nil {
						sm("??????????????????????????")
						return true
					} else {
						sm("??????????????????????????????")
						return false
					}
				}
			}
		} else {
			sm("??????????????????????????????????????????????????????")
		}
		return false
	}

	Submit := func() {
		submit_button := s.CheckElement(`//*[@id="fm-login-password"]`, 5) // ??????????
		Sleep(300, 500)
		submit_button.Click()
		Sleep(300, 500)
		submit_button.SendKeys(string('\ue007'))
	}

	// ***** Login ???????? *****??
	Sleep(500, 1000)
	sm("???????? https://login.taobao.com")
	s.wd.Get("https://login.taobao.com")
	sm("????????????")
	element := s.CheckElement(`//*[@id="fm-login-id"]`, 5) // ????????

	if element != nil {
		element.Click()
		Sleep(100, 500)
		s.SlowKeys("sword_yang:carol", element) // ??????????????

	} else {
		sm("???????????? ????????????????????????????????")
		return false // ??????????????????????????????????????????????????????????????????????????????????????????false
	}
	element = s.CheckElement(`//*[@id="fm-login-password"]`, 5) // ??????
	if element != nil {
		Sleep(500, 1000)
		s.SlowKeys("kkndcc110", element) // ????????????
	} else {
		sm("???????????? ??????????????????????????????")
		return false
	}

	element = s.CheckElement(`//*[@id="baxia-dialog-content"]`, 5) // ????
	if element != nil {
		sm("????????????????????????")
		Slip := func(t int) bool {
			sm("??????" + strconv.Itoa(t) + "??????????...")
			Sleep(1000, 2000)
			x_base := 920
			y_base := 425
			html := s.CheckElement(`/html`, 5) // ??????????
			html.MoveTo(x_base, y_base)        //??????????0??0
			s.wd.ButtonDown()
			html.MoveTo(1178, 425)
			Sleep(300, 500) // ??????????????????????????????????????
			s.wd.ButtonUp()
			Sleep(1000, 2000)
			sm("??????????????????????...")
			R := false
			ok1 := s.CheckElement(`//*[@id="module-open-aside"]/div/div/div/div/ul/li[2]/div[2]/p[1]/span`, 10) // ??????????????????????
			if ok1 == nil {
				// ????????????????????????????:
				Submit()
				ok2 := s.CheckElement(`//*[@id="module-open-aside"]/div/div/div/div/ul/li[2]/div[2]/p[1]/span`, 10) // ??????????????????????
				if ok2 == nil {
					R = false
				} else {
					R = true
				}
			} else {
				R = true
			}
			if R {
				sm("??" + strconv.Itoa(t) + "????????????")
				return true
			} else {
				sm("??" + strconv.Itoa(t) + "????????????")
				return false
			}

		}
		// ????????????????????????????????????????????????????????????????????????????????????????(??????)??
		// ????????????????????????????????????????????????????????????????????????
		slip_count := 0
		for {
			slip_count++
			if slip_count >= 3 {
				sm("????????????????????????????...")
				break
			}
			if Slip(slip_count) == true {
				break
			}
		}

		if CheckStates() == true {
			return true
		} else {
			sm("????????????????????????????????????...")
		}

	} else {
		sm("????????????????????...")
		Submit() //????????????????????????????????????????
		if CheckStates() == true {
			return true
		} else {
			sm("??????????????????????????????????????????????...")
		}
	}
	Sleep(500, 1000)
	sm("????????????????...")
	element = s.CheckElement(`//*[@id="login"]/div[1]/i`, 5) // ??????????????
	if element != nil {
		Sleep(1000, 3000)
		element.Click()
		pic, _ := s.wd.Screenshot()
		ioutil.WriteFile("pic.bmp", pic, 0644) //????????
		// ???????????????????????????????????????????????? ???????????? ???? ????????????
		sm("????????????????????????...")
		if CheckStates() == true {
			return true
		} else {
			sm("??????????????????????????????...")
			return false
		}
	} else {
		sm("???????????? ??????????????????????????????????????????")
		return false // ????????????????????????????????false
	}
}

func (s T_Selenium) CreateWuliuPage() bool {
	exist := func() bool {
		sm("???????????????????? ... (10??????)")
		element := s.CheckElement(`//*[@id="J_FilterBox"]/div[1]/ul/li[1]/span/input`, 10)
		if element != nil {
			return true
		} else {
			return false
		}
	}
	Sleep(1000, 2000)
	R := false
	if s.SwitchPage(1) == true {
		sm("??????????????????")
		Sleep(500, 1000)
		R = exist()
	} else {
		s.SwitchPage(0)
		sm("????????????????????????????????")
		Sleep(500, 600)
		bitmap := robotgo.OpenBitmap("items_wuliu.png")
		defer robotgo.FreeBitmap(bitmap)
		fx, fy := robotgo.FindBitmap(bitmap)
		if fx != -1 {
			rx := fx + 10
			ry := fy + 35
			Sleep(500, 600)
			robotgo.MoveMouseSmooth(rx+Rnd(5, 10), ry+Rnd(5, 10), low, high)
			Sleep(500, 600)
			robotgo.MouseClick("left", true)
			s.SwitchPage(1)
			Sleep(500, 600)
			R = exist()
		} else {
			R = false
		}
	}
	if R {
		sm("????????????????")
		Selenium.wd.ResizeWindow("", 1380, 1024)
		return true
	} else {
		sm("????????????????")
		return false
	}
}

func (s T_Selenium) CreateSoldPage() bool {
	exist := func() bool {
		sm("???????????????????????????? ... (10??????)")
		element := s.CheckElement(`//*[@id="auctionId"]`, 10)
		if element != nil {
			return true
		} else {
			return false
		}
	}
	Sleep(1000, 2000)
	R := false
	if s.SwitchPage(2) == true {
		sm("??????????????????")
		Sleep(500, 1000)
		R = exist()
	} else {
		s.SwitchPage(0)
		sm("????????????????????????????????????????????????")
		Sleep(500, 600)
		bitmap := robotgo.OpenBitmap("items_sold.png")
		defer robotgo.FreeBitmap(bitmap)
		fx, fy := robotgo.FindBitmap(bitmap)
		if fx != -1 {
			rx := fx + 10
			ry := fy + 35
			Sleep(500, 600)
			robotgo.MoveMouseSmooth(rx+Rnd(5, 10), ry+Rnd(5, 10), low, high)
			Sleep(500, 600)
			robotgo.MouseClick("left", true)
			s.SwitchPage(2)
			Sleep(500, 600)
			R = exist()
		} else {
			R = false
		}
	}
	if R {
		sm("????????????????????????")
		s.wd.ResizeWindow("", 1380, 1024)
		s.SwitchPage(2)
		return true
	} else {
		sm("????????????????????????")
		return false
	}
}

func (s T_Selenium) CreateWuliuText() string { // ?????????????? : ????????????????????????????????

	page_count := 0
	page_text := ""
	s.SwitchPage(1) // ??????????????
	Sleep(1000, 2000)

	for {
		page_count++
		sm("??????????????????" + strconv.Itoa(page_count) + "??")
		element_page := s.CheckElement(`//*[@id="J_Region"]/div[1]/div[1]`, 5) // ??????????????????????
		if element_page != nil {
			Sleep(1000, 3000)
			sm("????????????????????????...")
			output, _ := s.wd.PageSource()
			var re = regexp.MustCompile(`eyeAddress(\d{1,})`) // ????????????????????????
			for _, m := range re.FindAllStringSubmatch(output, -1) {
				element, _ := s.wd.FindElement(selenium.ByXPATH, "//*[@id='eyeAddress"+m[1]+"']") // ??????????
				Sleep(500, 1000)
				element.Click()
			}
			Sleep(500, 1000)
			element, _ := s.wd.FindElement(selenium.ByXPATH, "//*[@id='J_Express']") // ????????
			str, _ := element.Text()
			page_text = page_text + str
			element_nextpage := s.CheckElement(`//*[@id="J_Express"]/tfoot/tr/td/div[2]/div/a[2]/span`, 5) //??????????
			if element_nextpage == nil {
				sm("?????????? ?????????? ????????????????????")
				break
			} else {
				element_nextpage.Click()
			}

		} else {
			sm("?????????????? ??????????(????) ??????????")
			return "error"
		}
	} // for ??????????????
	sm("????????????????????")

	ioutil.WriteFile("page_text.txt", []byte(page_text), 0644) // ???? for test

	return page_text
}

func (s T_Selenium) CreateRedNoteText() string { // ????????????????????????????????????????

	var red_note_text string
	var fx int

	KeyPress := func(key string, times int) {
		for i := 0; i < times; i++ {
			robotgo.KeyTap(key)
			Sleep(150, 300)
		}
	}

	UnlockRedNoteSlider := func() bool {
		wait := 0
		state := 0
		for {
			bitmap := robotgo.OpenBitmap("punish.png")
			defer robotgo.FreeBitmap(bitmap)
			fx, fy := robotgo.FindBitmap(bitmap)
			if fx != -1 {
				rx := fx - 105 // rx, ry : ????????
				ry := fy + 185
				Sleep(500, 600)
				robotgo.MoveMouseSmooth(rx+Rnd(5, 10), ry+Rnd(5, 10), low, high)
				Sleep(500, 600)
				robotgo.DragSmooth(rx+Rnd(270, 285), ry)
				state = 1
			} else {
				break
			}
			wait++
			Sleep(500, 600)
			fmt.Println(wait)
			if wait >= 5 {
				state = 2
				break
			}
		}
		switch state {
		case 0:
			sm("????????")
			return true
		case 1:
			sm("??????????????????")
			return true
		case 2:
			sm("??????????????????!")
		}
		return false
	}

	// **** ???????? ****
	s.SwitchPage(2)
	Sleep(500, 600)
	sm("????????????????")

	KeyPress("pageup", 5)
	Sleep(3000, 5000)

	rx := 515
	ry := 650
	color := robotgo.GetPixelColor(rx, ry)
	sm("color---- " + color)
	if color == "4b4b4b" {
		sm("Black")
		robotgo.MoveMouseSmooth(rx+Rnd(10, 15), ry, low, high)
		Sleep(500, 600)
		robotgo.MouseClick("left", true)
	} else {
		sm("can't click waitSend button")
		return "error"
	}

	Sleep(1000, 2000)
	check := Selenium.CheckElement(`//*[@id="sold_container"]/div/div[4]/div[1]/div[3]`, 5) // ??????????????????????????
	if check != nil {
		str, _ := check.GetAttribute("outerHTML")
		r := regexp.MustCompile(`selected`) // ????????????selected????
		m := r.FindStringSubmatch(str)
		if len(m) > 0 {
			sm("????????????????????????")
			if s_check := UnlockRedNoteSlider(); s_check != true { // ????????????????????
				sm("??????????????????????????")
				return "error"
			}
		} else {
			sm("???????? ????????????????")
			return "error"
		}
	}

	Sleep(1000, 2000)
	sm("????????...")

	// ??????????
	check = s.CheckElement(`//*[@id="sold_container"]/div/div[6]/div[2]/table[1]`, 5)
	if check == nil {
		sm("??????????????????????????????????")
		return "error"
	}

	sm("????????shadow node")
	Sleep(1000, 2000)
	script := `
					if (!document.getElementById("my_shadow")) {
						s=document.createElement("shadow");
						s.setAttribute("id","my_shadow");
						s.setAttribute("value","");
						document.body.append(s);	
					};
 			 `
	s.wd.ExecuteScript(script, nil) // ????????JS ??????????DOM????????????????????????????return????

	scan_count := 0
	for { // -> ????????????
		scan_count++
		Sleep(1000, 2000)
		sm("??????????????????????" + strconv.Itoa(scan_count) + "??")
		index_red := 5 // ????????????????5????????
		// ????????????????????????
		for { // -> ???????? ?? ??????????
			bitmap := robotgo.OpenBitmap("redflag.png")
			points := robotgo.FindEveryBitmap(bitmap)
			if points != nil {
				for k, v := range points {
					if v.Y >= 625 && v.Y <= 725 { // ??Y?? 625-725??????????????????????????????????????????????????
						fmt.Println("click!", k)
						robotgo.MoveMouseSmooth(v.X+Rnd(8, 11), v.Y+Rnd(10, 13), low, high)
						// ????????????????????????
						// ????????????????????????????????????????????????
						// ??index_red??????????????????????????????????????????????????????????index_red????????
						e_red := s.CheckElement(`//*[@id="list-sold-items"]/div[`+strconv.Itoa(index_red)+`]`, 500, true) // ????????????????div??
						if e_red != nil {
							index_red++
							px := strconv.Itoa(v.X)
							py := strconv.Itoa(v.Y)

							script := `
										var oPoint = document.elementFromPoint(` + px + `,` + py + `);
										var oID = oPoint.getAttribute("data-reactid");
										document.getElementById("my_shadow").setAttribute("value", oID);
							`
							// my_shadow ????????????????DOM????
							Selenium.wd.ExecuteScript(script, nil)
							shadow_result, err := Selenium.wd.FindElement(selenium.ByID, "my_shadow")
							fmt.Println(err)
							var order_id string
							if err == nil {
								fmt.Println(shadow_result)
								order_id, _ = shadow_result.GetAttribute("value")
								r := regexp.MustCompile(`\$(\d{1,})\.`)
								m := r.FindStringSubmatch(order_id) // ??????????????id
								fmt.Println(shadow_result.GetAttribute("value"))
								if len(m) > 0 {
									order_id = m[1]
								} else {
									order_id = "!error!"
								}
							}

							red_note, _ := e_red.Text()
							red_note_text += "***" + "#" + order_id + "#" + red_note + "#" + "***" + "\n"
						}
						Sleep(500, 600)
						robotgo.MoveMouseSmooth(Rnd(600, 800), Rnd(600, 800), low, high) // ????????
						Sleep(500, 600)
					}
				}
			}
			kd := Rnd(2, 3)
			KeyPress("down", kd) // ????????????????down??
			bitmap = robotgo.OpenBitmap("end_point.png")
			fx, _ = robotgo.FindBitmap(bitmap)
			if fx != -1 {
				break
			}
		} // -> ????for ?? ????????
		KeyPress("pageup", 5)

		rx := 1235
		ry := 666
		color := robotgo.GetPixelColor(rx, ry)
		fmt.Println("color---- ", color)
		if color == "999999" {
			robotgo.MoveMouseSmooth(rx+Rnd(5, 10), ry, low, high)
			Sleep(500, 600)
			robotgo.MouseClick("left", true)
			if s_check := UnlockRedNoteSlider(); s_check != true { // ????????????????????
				sm("??????????????????????????")
				return "error"
			}
		} else {
			sm("??????????????")
			break
		}

	} // ????for : ????????
	ioutil.WriteFile("red_note_text.txt", []byte(red_note_text), 0644) // ???? for test
	return red_note_text
}

func (s T_Selenium) MakePageOrders(str string, strSold string) []Page_Order {

	//$$$$$$$$$$$$$$$$$$$$$$$$$$$
	type Red_Note struct {
		order_id string
		red_note string
	}
	var red_notes []Red_Note

	// ??????????????????
	r_reds := regexp.MustCompile(`\*\*\*(.+?)\*\*\*`)
	m_reds := r_reds.FindAllString(strSold, -1)
	for _, v := range m_reds {
		r_red := regexp.MustCompile(`\*\*\*#(\d{1,})#(.+?)#\*\*\*`)
		m_red := r_red.FindStringSubmatch(v)
		if len(m_red) > 2 {
			var one Red_Note
			one.order_id = m_red[1]
			one.red_note = m_red[2]
			red_notes = append(red_notes, one)
		}
	}

	//??????????
	sm("??????????????????????????????????")
	var SQL string
	type Product_List struct { // ??????????????????
		p_id      string
		p_name    string
		tb_name   string
		isvoltage string
	}
	SQL = "select id, name, tb_name, isvoltage from ld_products"
	rst, _ := mysql_con.Query(SQL)
	var ProductList = make([]Product_List, len(rst))
	for k, v := range rst {
		ProductList[k].p_id = v["id"]
		ProductList[k].p_name = v["name"]
		ProductList[k].tb_name = v["tb_name"]
		ProductList[k].isvoltage = v["isvoltage"]
	}

	type Vendor_List struct { // ????????????????????
		vendor_id      string
		vendor_tb_name string
	}

	SQL = "select id, taobao from ld_vendor where class = 2"
	rst, _ = mysql_con.Query(SQL)
	var VendorList = make([]Vendor_List, len(rst))
	for k, v := range rst {
		VendorList[k].vendor_id = v["id"]
		VendorList[k].vendor_tb_name = v["taobao"]
	}

	var orders []Page_Order

	// ???????????????? ???????? ??????????????????????????????????????????
	r_remove := regexp.MustCompile(`(??????????[\r\n].+)????([\r\n])`)
	str = r_remove.ReplaceAllString(str, `$1$2`) // ??????????????

	var re = regexp.MustCompile(`??????????[\s\S]+?????[\r\n]`)
	match := re.FindAllStringSubmatch(str, -1) // ??????????????

	orders = make([]Page_Order, len(match))
	for k, v := range match {

		r := regexp.MustCompile(`??????????(\d{1,})[\r\n]??????????(.+?)[\r\n]`)
		m := r.FindStringSubmatch(v[0])

		if len(m) > 0 {
			orders[k].tb_id = m[1]
			orders[k].date = m[2]
			orders[k].vendor_id = "84" // ????????????????
			orders[k].vendor_class = "1"
			orders[k].state = "2" //??????
		}

		r = regexp.MustCompile(`??????????[\r\n](.+?)[\r\n]`)
		m = r.FindStringSubmatch(v[0])
		// ??????????????????????
		r_add := regexp.MustCompile(`^(.+?)\s{3}(.+?),.+?,\s{1}(.+?),\s{1}(.+?)$`)
		m_add := r_add.FindStringSubmatch(m[1])
		if len(m_add) > 0 {
			r = regexp.MustCompile(` `)
			trim_space := r.ReplaceAllString(m_add[2], "") //????????????????
			address := "{" + m_add[1] + "}" + " " + m_add[3] + "??" + m_add[4] + "??" + trim_space
			orders[k].address = address
			// ??????????
			tb_name := m_add[1]
			for _, v := range VendorList {
				if tb_name == v.vendor_tb_name {
					orders[k].vendor_id = v.vendor_id
					orders[k].vendor_class = "2" // ??????????????????????
					fmt.Println("found vendor: ", tb_name, " ->", v.vendor_id)
					break
				}
			}
		} else {
			orders[k].address = "????????????????????????" + orders[k].tb_id
			fmt.Println(orders[k].address)
		}

		r = regexp.MustCompile(`??????????[\r\n](.+?)[\r\n]`)
		m = r.FindStringSubmatch(v[0])
		if len(m) > 0 {
			orders[k].note = "[" + m[1] + "]"
		}
		// ??????????????
		for _, v := range red_notes {
			if orders[k].tb_id == v.order_id {
				orders[k].note += "[" + v.red_note + "]"
			}
		}
		// ??????????????????????????
		var suborders []Sub_Order
		r = regexp.MustCompile(`[\r\n](.+?)[\r\n](??????????\s(.+?)[\r\n]){0,1}(\d{1,}).\d{1,}×?\s(\d{1,})`)
		mg := r.FindAllStringSubmatch(v[0], -1) //??????????match????????FindAllStringSubmatch??????-1????
		if len(mg) > 0 {
			suborders = make([]Sub_Order, len(mg))
			var total_price int
			for k2, m2 := range mg {
				suborders[k2].p_name = m2[1] + m2[3]

				p_name := m2[1] + m2[3]       // p_name ?????????? + ????SKU????
				suborders[k2].p_id = "38"     // ????ID: ??????
				suborders[k2].p_name = p_name // ??????????p_id = 38 (??????) p_name = ??????????
				suborders[k2].p_voltage = "1" // ??????????????
				//????????p_id ?? p_name ??????????

				for _, p := range ProductList {
					if p_name == p.tb_name { // ??????????????????????????????????
						suborders[k2].p_id = p.p_id
						suborders[k2].p_name = p.p_name
						if p.isvoltage == "1" {
							// PS: 1?? 2?? 3?? 4?? 5???? 6?? ??????????????????????????????????????????????????????????????????
							if orders[k].vendor_class == "2" {
								suborders[k2].p_voltage = "5" // ?????????????????????????? ?? ??????????????????"????"????????????????????
								if orders[k].note != "" {
									r := regexp.MustCompile(`(??|110|US|Us|us)`)
									m := r.FindStringSubmatch(orders[k].note) //????????

									if len(m) > 0 {
										suborders[k2].p_voltage = "2"
										fmt.Println("found ????110??")
									}
									r = regexp.MustCompile(`(??|UK|Uk|uk|??|HK|Hk|hk)`)
									m = r.FindStringSubmatch(orders[k].note) //????????
									if len(m) > 0 {
										suborders[k2].p_voltage = "3"
										fmt.Println("found ????220??")
									}
									r = regexp.MustCompile(`(??|EU|Eu|eu|??|??|??)`)
									m = r.FindStringSubmatch(orders[k].note) //????????
									if len(m) > 0 {
										suborders[k2].p_voltage = "4"
										fmt.Println("found ????220??")
									}
								}
							}

						} else {
							suborders[k2].p_voltage = "6" // ????????????????????????????????
						}
						fmt.Println("found product : ", p_name, " ->", p.p_name)
						break
					}
				}

				p, _ := strconv.Atoi(m2[4]) // ????
				q, _ := strconv.Atoi(m2[5]) // ????
				intPrice := p * q
				total_price += intPrice
				strPrice := strconv.Itoa(intPrice)
				suborders[k2].price = strPrice
				suborders[k2].shipped_date = ""
				suborders[k2].express = ""
				suborders[k2].tracking = ""
				suborders[k2].state = "2"
				suborders[k2].amount = m2[5]
			} //for
			orders[k].total_price = strconv.Itoa(total_price) // ????????
			orders[k].Sub_Orders = suborders

			if orders[k].tb_id == "9876543219876543210" {
				fmt.Println(orders[k])
			}

		} // if
	} // for
	return orders
}

func (s T_Selenium) MakeMySQLOrders() []MySQL_Order {
	// ??????????????mysql????
	SQL := "SELECT id, date, price, tb_id, note, address, state_id,(SELECT group_concat(id,'|',item_describe,'|', product_id, '|', amount,'|', voltage,'|', state,'|', price) FROM ld_order_suborder where ld_order_suborder.order_id = ld_order.id) as p_info FROM ld_order where state_id = 2 and tb_id <> ''"
	rst, _ := mysql_con.Query(SQL)
	OrdersMySQL := make([]MySQL_Order, len(rst))
	for k, v := range rst {
		OrdersMySQL[k].id = v["id"]
		OrdersMySQL[k].tb_id = v["tb_id"]
		OrdersMySQL[k].total_price = v["price"]
		OrdersMySQL[k].date = v["date"]
		OrdersMySQL[k].note = v["note"]
		OrdersMySQL[k].address = v["address"]
		OrdersMySQL[k].state = v["state"]
		r := regexp.MustCompile(`(.+?),`)         // ????????????????????????7769|MK2 6J1(??)|2|2|1|2|1460,7770|MK3|6|3|2|2|3840
		m := r.FindAllString(v["p_info"]+",", -1) // ??????????????????????????PS:??????????????????????
		SubOrders := make([]Sub_Order, len(m))
		for k1, v1 := range m {
			r := regexp.MustCompile(`(\d{1,})\|(.+?)\|(\d{1,})\|(\d{1,})\|(\d{1,})\|(\d{1,})\|(\d{1,})`) // ???? | ????????????
			m = r.FindStringSubmatch(v1)
			SubOrders[k1].order_id = v["id"] // ??????order_id = ??????id
			SubOrders[k1].sub_id = m[1]
			SubOrders[k1].p_name = m[2]
			SubOrders[k1].p_id = m[3]
			SubOrders[k1].amount = m[4]
			SubOrders[k1].p_voltage = m[5]
			SubOrders[k1].state = m[6]
			SubOrders[k1].price = m[7]
		}
		OrdersMySQL[k].Sub_Orders = SubOrders
	}
	return OrdersMySQL
}

func (s T_Selenium) Compare(pageOrders []Page_Order, mysqlOrders []MySQL_Order) {
	// ????1?????? -> mySQL (??????????????????????????????????????????)
	for _, page := range pageOrders {
		addNew := true
		for _, mysql := range mysqlOrders {
			if page.tb_id == mysql.tb_id {
				addNew = false
				break
			}
		}
		if addNew {
			var neworder MySQL_Order
			neworder.Page_Order = page //??????????????????????????
			neworder.Flag = 1          // ??????????????flag = 1 , PS: 1=???? 2=???? 3=????
			mysqlOrders = append(mysqlOrders, neworder)
			fmt.Println("??????", page.tb_id)
		}
	}
	// ????2??mySQL -> ???? ????????????????????????????????????????????????
	for k, mysql := range mysqlOrders {
		disable := true
		for _, page := range pageOrders {
			if mysql.tb_id == page.tb_id {
				disable = false
				break
			}
		}
		if disable {
			mysqlOrders[k].Flag = 2 // ??????????????
			fmt.Println("??????", mysql.tb_id)
		}
	}

	// ????????????????
	var SQL string
	for _, v := range mysqlOrders {
		switch v.Flag {
		case 1: // ????
			sm("??????????????" + v.tb_id)
			SQL = "INSERT INTO ld_order " +
				"(date, vendor_id, tb_id, price, state_id, note, address)" +
				" VALUES " +
				"('" + v.date + "'," + v.vendor_id + ", " + "'" + v.tb_id + "', " + v.total_price + ", " +
				"2, '" + v.note + "', '" + v.address + "')"
			newOrderID := mysql_con.Exec(SQL) // ????????????OrderID

			for _, v2 := range v.Sub_Orders {
				SQL = "INSERT INTO ld_order_suborder " +
					"(order_id, product_id, vendor_id, item_describe, voltage, amount, price, shiped_date, state)" +
					" VALUES " +
					"(" + newOrderID + ", " + v2.p_id + ", " + v.vendor_id + ", '" + v2.p_name + "', " +
					v2.p_voltage + ", " + v2.amount + ", " + v2.price + ", '1900-01-01 00:00:00', " + v2.state + ")"
				mysql_con.Exec(SQL) // ????????ID
			}

		case 2: // ????
			sm("??????????????" + v.tb_id)
			SQL = "UPDATE ld_order SET state_id = 12 WHERE id = " + v.id // ??????????
			fmt.Println(SQL)
			mysql_con.Exec(SQL)
			SQL = "UPDATE ld_order_suborder SET state = 12 WHERE order_id = " + v.id // ??????????, v.id = ??????id (order_id)
			fmt.Println(SQL)
			mysql_con.Exec(SQL)

		case 3: // ????
		}
	}
	sm("????????????!")
}

func (s T_Selenium) Check() bool {

	// ***** Check???????? *****??
	sm("cls") // ??????????
	// 1: ????????
	if s.CheckLogin() != true {
		sm("ERR: ??????????????")
		return false
	}

	// 2 : ????????????
	if s.CreateWuliuPage() != true {
		sm("????WuliuPage??????????")
		return false
	}
	// 3 : ????????????????????
	if s.CreateSoldPage() != true {
		sm("????SoldPage??????????")
		return false
	}

	// 4: ????????????????????
	PageWuliuText := s.CreateWuliuText()
	if PageWuliuText == "error" {
		sm("????????????????????????")
		return false
	}

	// 5: ????????????????????????
	PageReadNoteText := s.CreateRedNoteText()
	if PageWuliuText == "error" {
		sm("????????????????????????????")
		return false
	}

	OrdersPage := s.MakePageOrders(PageWuliuText, PageReadNoteText) // ????????????????????????????
	fmt.Println(OrdersPage)
	OrdersMySQL := s.MakeMySQLOrders() // ????????????????
	s.Compare(OrdersPage, OrdersMySQL) // ????????????????????

	sm("??????????????????????????")
	return true
}

// ***** ?????????????? ***** ??
const (
	low  = 0.93 // ??????????????????
	high = 1.01
)

var Conn net.Conn
var Selenium T_Selenium

func WebSocket() {
	// ?????? Websocks
	var httpSrv *http.Server
	httpSrv = &http.Server{Addr: ":8082"}
	http.HandleFunc("/", WSS)
	httpSrv.ListenAndServe() //??????????????????????????????????????????Listen??????
}

func WSS(w http.ResponseWriter, r *http.Request) {
	// Websocks????????????
	if Conn != nil {
		fmt.Println("Old Conn Destroyed:", Conn)
		Conn.Close()
	}

	Conn := startWsServer(w, r)
	var msg_receive []byte
	fmt.Println("New Conn Created:", Conn)

	for {

		msg_receive, _, _ = wsutil.ReadClientData(Conn)
		msg_str := string(msg_receive)

		if msg_str == "" {
			continue
		}

		reg := regexp.MustCompile(`#rockage_cmds#(.+?)#rockage_datas#(.+)`)
		match := reg.FindStringSubmatch(string(msg_receive))

		if match == nil {
			continue
		}

		cmds := match[1]
		datas := match[2]
		fmt.Println(cmds)

		switch cmds {
		case "start":

			Selenium.Check()

		case "stop":
			// ??????????????????????????????
			file, _ := os.Open("script_unlock_in_read_note.txt")
			defer file.Close()
			scanner := bufio.NewScanner(file)
			fmt.Println("*** START ***")
			for scanner.Scan() {
				str := scanner.Text()
				r := regexp.MustCompile(`\r`)
				str = r.ReplaceAllString(str, "")
				//fmt.Println(s)
				var x, y int
				r = regexp.MustCompile(`Move#(\d{1,})#(\d{1,})#`)
				m := r.FindStringSubmatch(str) //????????
				if len(m) > 0 {
					x, _ = strconv.Atoi(m[1])
					y, _ = strconv.Atoi(m[2])
					x += 464
					y += 287
					fmt.Println("Move#" + strconv.Itoa(x) + "#" + strconv.Itoa(y) + "#")
				}
				r = regexp.MustCompile(`ButtonDown`)
				m = r.FindStringSubmatch(str) //????????
				if len(m) > 0 {
					fmt.Println("ButtonDown")
				}
				r = regexp.MustCompile(`ButtonUp`)
				m = r.FindStringSubmatch(str) //????????
				if len(m) > 0 {
					fmt.Println("ButtonUp")
				}

			}
			fmt.Println("*** END ***")
			break

			cc := 0
			if cc == 1 {
				filename := "page_text.txt"
				f, _ := os.Open(filename)
				defer f.Close()
				b, _ := ioutil.ReadAll(f)
				s := string(b)
				r := regexp.MustCompile(`\r`)
				trim_n := r.ReplaceAllString(s, "") //????????????\r
				var se T_Selenium
				OrdersPage := se.MakePageOrders(trim_n, trim_n) // ??????????????????????????????
				fmt.Println(OrdersPage)
			}
			// ??????????????????????????????????

			break

			/*
				filename := "page_text.txt"
				f, _ := os.Open(filename)
				defer f.Close()
				b, _ := ioutil.ReadAll(f)
				s := string(b)
				r := regexp.MustCompile(`\r`)
				trim_n := r.ReplaceAllString(s, "") //????????????\r
				var se T_Selenium
				OrdersPage := se.MakePageOrders(trim_n) // ??????????????????????????????
				OrdersMySQL := se.MakeMySQLOrders()     // ????????????????
				se.Compare(OrdersPage, OrdersMySQL)     // ????????????????????
			*/

		case "check":
			if Selenium.wd != nil {
				if Selenium.CheckLogin() == true {
				} else {
					go Selenium.Login()
				}
			} else {
				sm("??????????Selenium")
			}

		case "restart":
			if Selenium.service != nil {
				Selenium.service.Stop() //??????????selenium????
			}
			startChrome() // ??????Selenium

		case "login":

			script := `
					s=document.createElement("shadow");
					s.setAttribute("id","my_shadow");
					s.setAttribute("value","");
					document.body.append(s);
				`
			Selenium.wd.ExecuteScript(script, nil)

			for {

				//			script := `
				//				var oPoint=document.elementFromPoint(470,100);
				//				document.createElement("shadow_element");
				//				document.shadow_element= oPoint.getAttribute("aria-owns");
				//			`

				Selenium.wd.ExecuteScript(`document.getElementById("my_shadow").setAttribute("value","hello");`, nil)

				shadow_result, _ := Selenium.wd.FindElement(selenium.ByID, "my_shadow")
				fmt.Println(shadow_result)
				fmt.Println(shadow_result.GetAttribute("value"))
				// text, err := Selenium.wd.ExecuteScript(`var oPoint=document.elementFromPoint(470,100);console.log(oPoint.getAttribute("aria-owns") );`, nil)

				//e, err := Selenium.wd.ExecuteScript(`var oPoint=document.elementFromPoint(470,100);return oPoint;`, nil)
				//text = e.GetAttribute("aria-owns")

				//fmt.Println(e)
				//fmt.Println(err)

				Sleep(500, 600)
			}

		case "sms":
			Selenium.ClickSms(datas)

		case "coordinate":

		default:

		}

	}
}

func startWsServer(w http.ResponseWriter, r *http.Request) net.Conn {
	Conn, _, _, _ = ws.UpgradeHTTP(r, w)
	return Conn
}

/*
func startTimer() {
	time.AfterFunc(time.Second*3, func() {
		fmt.Println("AfterFunc")
		t := time.NewTicker(time.Second * 2)
		defer t.Stop()
		for range t.C {
			fmt.Println("Ticker")
			if timer_stop {
				t.Stop()
				timer_stop = false
			}
		}
	})
}
*/

func startChrome() {
	opts := []selenium.ServiceOption{}
	caps := selenium.Capabilities{
		"browserName":      "chrome",
		"pageLoadStrategy": "eager",
	}
	imagCaps := map[string]interface{}{
		//		"profile.managed_default_content_settings.images": 2,
	}

	chromeCaps := chrome.Capabilities{
		Prefs:           imagCaps,
		Path:            "",
		ExcludeSwitches: []string{"enable-automation"}, // ????
		Args: []string{
			//"--headless",
			`--window-position=-7,0`,
			`--window-size=1380,1024`,
			"--no-sandbox",
			"--disable-blink-features=AutomationControlled", // ????
			"--user-agent=Mozilla/ 5.0(Windows NT 10.0; WOW64) Chrome/55.0.2883.87 Safari/537.36",
		},
	}
	caps.AddChrome(chromeCaps)
	//Selenium.service, _ = selenium.NewChromeDriverService("./chromedriver/windows/chromedriver.exe", 9515, opts...)
	Selenium.service, _ = selenium.NewChromeDriverService("./chromedriver/linux/chromedriver", 9515, opts...)
	Selenium.wd, _ = selenium.NewRemote(caps, fmt.Sprintf("http://localhost:%d/wd/hub", 9515))
	//script := `Object.defineProperty(navigator, 'webdriver', {get: () => undefined})`
	//Selenium.wd.ExecuteScript(script, nil)

	Selenium.wd.Get("https://taobao.com")
	Selenium.wd.ResizeWindow("", 1380, 1024)

	//Selenium.wd.Get("https://intoli.com/blog/making-chrome-headless-undetectable/chrome-headless-test.html")
	//
	//Selenium.wd.Get("https://jspaint.app")
	ok := Selenium.CheckElement(`//*[@id="q"]`, 10) // ????????????
	if ok != nil {
		sm("????????????????????selenium??????????")
	} else {
		sm("????????????????????selenium????????????")
	}

}

func sm(msg string) {
	var msg_send []byte = []byte(msg)
	wsutil.WriteServerMessage(Conn, ws.OpText, msg_send)
}

func Rnd(min int, max int) int { // ????????????
	rand.Seed(time.Now().Unix())
	return min + rand.Intn(max-min)
}

func Sleep(min int, max int) { // ??????????????
	rand.Seed(time.Now().Unix())
	time.Sleep(time.Duration(min+rand.Intn(max-min)) * time.Millisecond) // ????
}

func UTF8CodeToString(str string) string {
	//utf8??????????string:
	s2 := []byte(str)
	temp := make([]byte, 4)
	var rec int16 = 0
	var result []byte
	var r_count int16 = 0
	for _, v := range s2 {
		if rec == 0 || rec == 1 {
			result = append(result, v)
		}
		if v == 92 { // "\"????
			rec = 1
			continue
		}
		if rec == 1 {
			if v == 117 { //  "u" ????
				rec = 2
			} else {
				rec = 0
			}
			continue
		}
		if rec == 2 {
			temp[r_count] = v
			r_count++
			if r_count > 3 {
				utf8_code, _ := strconv.ParseInt(string(temp), 16, 32)
				utf8_string := fmt.Sprintf("%c", utf8_code)
				utf8_byte := []byte(utf8_string)
				for _, vv := range utf8_byte {
					result = append(result, vv)
				}
				rec = 0
				r_count = 0
			}
		}
	}
	t := string(result)
	reg := regexp.MustCompile(`\\u`) //??????????: \u
	t = reg.ReplaceAllString(t, "")
	reg = regexp.MustCompile(`\\`) //??????????: \
	t = reg.ReplaceAllString(t, "")
	return t
}

func Abs(a int) (ret int) {
	ret = (a ^ a>>31) - a>>31
	return
}
